openapi: 3.0.1
info:
  title: MDB Lite API Specification
  description: MDB Lite | API Connection Specification
  version: 0.0.1
servers:
  - url: http://localhost:8080
    description: Generated server url
security:
  - BEARER_JWT: [ ]
paths:
  /books:
    get:
      tags:
        - Books
      description: Find all books.
      operationId: getBooks
      parameters:
        - name: bookQueryParams
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BookQueryParams'
          style: form
          explode: true
        - name: pagingCriteria
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BookPagingCriteria'
          style: form
          explode: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookPageDto'
        "500":
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - Books
      description: Create a new book.
      operationId: createBook
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreateDto'
      responses:
        "201":
          description: Book created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalError'
  /books/{id}:
    delete:
      tags:
        - Books
      description: Delete a single book by ID.
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Book deleted successfully.
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
    put:
      tags:
        - Books
      description: Update a book by ID.
      operationId: updateBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookCreateDto'
      responses:
        "200":
          description: Book updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDto'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
  /authors:
    get:
      tags:
        - Authors
      description: Find all authors.
      operationId: getAuthors
      parameters:
        - name: authorQueryParams
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AuthorQueryParams'
          style: form
          explode: true
        - name: pagingCriteria
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/AuthorPagingCriteria'
          style: form
          explode: true
      responses:
        "200":
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorPageDto'
        "500":
          $ref: '#/components/responses/InternalError'
    post:
      tags:
        - Authors
      description: Create a new author.
      operationId: createAuthor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDto'
      responses:
        "201":
          description: Author created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
        "400":
          $ref: '#/components/responses/BadRequest'
        "500":
          $ref: '#/components/responses/InternalError'
  /authors/{id}:
    delete:
      tags:
        - Authors
      description: Delete a single author by ID.
      operationId: deleteAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Author deleted successfully.
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'
    put:
      tags:
        - Authors
      description: Update an author by ID.
      operationId: updateAuthor
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthorDto'
      responses:
        "200":
          description: Author updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthorDto'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    #----------------- Pagination Wrapper Schemas -----------------
    PaginationResponse:
      type: object
      properties:
        content:
          type: array
          items: { }
        totalElements:
          type: integer
          format: int64
          default: 0
        totalPages:
          type: integer
          default: 0
        first:
          type: boolean
        last:
          type: boolean
        number:
          type: integer
        numberOfElements:
          type: integer
        size:
          type: integer
        empty:
          type: boolean
        sort:
          $ref: "#/components/schemas/Sort"
    Sort:
      type: object
      properties:
        isSorted:
          type: boolean
        sortField:
          type: string
        sortDirection:
          $ref: '#/components/schemas/SortDirection'

    BookPagingCriteria:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginationQueryParams'
        - type: object
          properties:
            sortColumnEnum:
              type: string
              enum:
                - title
              default: title
    
    BookQueryParams:
      type: object
      properties:
        title:
          type: string
          description: Title of the book to search for

    BookPageDto:
      type: object
      allOf:
        - $ref: "#/components/schemas/PaginationResponse"
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/BookDto"
              default: [ ]

    BookBaseDto:
      type: object
      required:
        - title
      properties:
        title:
          type: string
      description: Book model with all fields directly included.

    BookDto:
      allOf:
        - $ref: '#/components/schemas/BookBaseDto'
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: uuid
            authors:
              type: array
              items:
                $ref: '#/components/schemas/AuthorDto'

    BookCreateDto:
      allOf:
        - $ref: '#/components/schemas/BookBaseDto'
        - type: object
          required:
            - authorIds
          properties:
            authorIds:
              type: array
              items:
                type: string
                format: uuid

    PaginationQueryParams:
      type: object
      properties:
        pageNumber:
          type: integer
          default: 0
        pageSize:
          type: integer
          default: 0
        sortDirection:
          $ref: '#/components/schemas/SortDirection'
    SortDirection:
      type: string
      enum: [ "ASC", "DESC" ]
      default: "ASC"

    # --------- Error Responses ---------
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
        details:
          type: string
    BadRequestResponse:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string

    AuthorDto:
      type: object
      required:
        - fullName
      properties:
        id:
          type: string
          format: uuid
        fullName:
          type: string
      description: Author model with all fields directly included.

    AuthorQueryParams:
      type: object
      properties:
        fullName:
          type: string
          description: Name of the author to search for

    AuthorPagingCriteria:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginationQueryParams'
        - type: object
          properties:
            sortColumnEnum:
              type: string
              enum:
                - fullName
              default: fullName

    AuthorPageDto:
      type: object
      allOf:
        - $ref: "#/components/schemas/PaginationResponse"
        - type: object
          properties:
            content:
              type: array
              items:
                $ref: "#/components/schemas/AuthorDto"
              default: [ ]

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/BadRequestResponse"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Timeout:
      description: Timeout
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  securitySchemes:
    BEARER_JWT:
      type: http
      scheme: bearer
      bearerFormat: JWT